#!/usr/bin/env python
from collections import namedtuple
import os
import socket
import struct
import numpy
import time
import unittest
if os.sys.version_info >= (3,):
    long = int


def s(b): return b if isinstance(b, type('')) else b.decode("utf-8")


# STATE CONSTANTS
TIME_WIDTH = 40
INIT_DISARM = 0
INIT_ON = 1
INIT_ARM = 3
INIT_REARM = 7
INIT_REINIT = 15

MAX_STATUS = 8
MAX_SAMPLES = 45000

TIME_MASK = (1 << TIME_WIDTH) - 1

STATE_CH0 = 1
STATE_CH1 = 2
STATE_CH2 = 4
STATE_IDLE = 8
STATE_ARMED = 16
STATE_ACTIVE = 32
STATE_NOTWAIT = STATE_IDLE | STATE_ARMED | STATE_ACTIVE
STATE_TRG = 64
STATE_CLK = 128


Status = namedtuple("Status", (
    "index",
    "time",
    "mask",
    "cycle",
    "sequence",
    "burst",
    "repeat",
    "flags",
))


class Flags(long):
    def __str__(self):
        out = ''.join(
            c.upper() if (self >> 7-i) & 1 else c
            for i, c in enumerate('eoric')
        )
        return self.signals + out + self.wait_for[0] + self.gstate[0]

    def __repr__(self): return self.__str__() + bin(
            ((self >> 8) | 256) & 0x1FF)[3:]

    @property
    def gstate(self):
        if self & 0x02:
            if self & 0x01:
                return 'RUN'
            return 'WAI'
        elif self & 0x01:
            return 'ARM'
        return 'IDL'

    @property
    def wait_for(self): return 'DELAY' if self & 0x04 else 'CYCLE'

    @property
    def clear(self): return bool(self & 0x08)

    @property
    def inc_addr(self): return bool(self & 0x10)

    @property
    def restart(self): return bool(self & 0x20)

    @property
    def check(self): return bool(self & 0x40)

    @property
    def error(self): return bool(self & 0x80)

    @property
    def signals(self): return bin(((self >> 56) & 0xFF) | (1 << 8))[3:]


# rp_trig CONNECTION
class rp_trig:
    """Remote control over RedPitaya RP_TRIG v2 module.

    https://github.com/zack-vii/Anacleto   projects/pr_trig2
    """
    @staticmethod
    def _tobyte(val):
        if not isinstance(val, int):
            value = 0
            for ch in val:
                value |= 1 << ch
            return value
        return val

    @staticmethod
    def _make_msg(prog, form='', *args, **append):
        append = append.get('append', 0)
        return (b'RPT'
                + struct.pack('<L', struct.calcsize(form)+append)
                + prog[0:1] + struct.pack(form, *args))

    def __init__(self, address):
        host = address.split(':', 2) + [5000]
        port = int(host[1])
        self._address = (host[0], port)
        self._connect()

    def _connect(self):
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.settimeout(3)  # connect would never return if device offline
        self.sock.connect(self._address)

    def _receive_safe(self, length):
        buf = bytearray(length)
        view = memoryview(buf)
        while view.shape[0]:
            out = self.sock.recv_into(view, view.shape[0])
            if not out:
                return buf[:-view.shape[0]]
            view = view[out:]
        return buf

    def _exchange_safe(self, msg, length):
        self.sock.settimeout(0)
        try:
            while self.sock.recv(0x400):
                pass
        except Exception:
            pass
        self.sock.settimeout(1)
        self.sock.sendall(msg)
        return self._receive_safe(length)

    def _exchange(self, msg, format):
        def _tryexchange(msg, format, length):
            ret = self._exchange_safe(msg, length)
            while not ret:
                self._connect()
                ret = self._exchange_safe(msg, length)
            return struct.unpack(format, ret)
        length = struct.calcsize(format)
        try:
            return _tryexchange(msg, format, length)
        except (KeyboardInterrupt, SystemExit):
            raise
        except OSError:
            self._connect()
            return _tryexchange(msg, format, length)

    def _exchange_str(self, msg):
        length = self._exchange(msg, '<L')[0]
        if length > 0:
            return s(self.sock.recv(length))
        else:
            return ''

    @staticmethod
    def _tointargs(*args):
        return tuple((int(arg) if arg is not None else -1) for arg in args)

    @property
    def status(self):
        """Return current status buffer."""
        status = self.statusx
        index = status[0]
        time = status[1] & TIME_MASK
        mask = status[1] >> TIME_WIDTH
        cycle, sequence, burst, repeat = status[2:6]
        flags = Flags(status[6])
        return Status(
            index, time, mask, cycle, sequence, burst, repeat, flags)

    def make_clock(
            self, delay=0, width=-1, period=-1,
            burst=-1, cycle=-1, repeat=-1):
        """Set up default clock with trivial timing.

        The following parameters are transmitted:
            DELAY, WIDTH, PERIOD, BURST, CYCLE, and REPEAT

        TIMES   defaults to [0].
        MASK    defaults to [0xFF]
        """

        args = rp_trig._tointargs(delay, width, period, burst, cycle, repeat)
        msg = rp_trig._make_msg(b'C', '<6q', *args)
        return self._exchange_str(msg)

    def _make_sequence(
            self, delay=-1, width=-1, period=-1,
            burst=-1, cycle=-1, repeat=-1, data=(255 << TIME_WIDTH,)):
        data = numpy.array(data, numpy.int64).tobytes()
        args = rp_trig._tointargs(delay, width, period, burst, cycle, repeat)
        msg = rp_trig._make_msg(b'S', '<6q', *args, append=len(data))
        return self._exchange_str(msg + data)

    def make_sequence(
            self, delay=-1, width=-1, period=-1,
            burst=-1, cycle=-1, repeat=-1, times=(0,), mask=()):
        """Set up with timing and mask control.

        The following parameters are transmitted:
            DELAY, WIDTH, PERIOD, BURST, CYCLE, REPEAT, TIMES, and MASK
        """
        mask = numpy.array(
                [(m & 0xFF) << TIME_WIDTH for m in mask or [255]],
                dtype=numpy.uint64)
        lentimes, lenmask = len(times), len(mask)
        topad = lentimes - lenmask
        if topad > 0:
            mask = numpy.pad(mask, (0, topad), 'wrap')
        elif topad < 0:
            mask = mask[:lentimes]
        times = numpy.ascontiguousarray(
                times, dtype=numpy.uint64) & TIME_MASK
        return self._make_sequence(
            delay, width, period, burst, cycle, repeat, times | mask)

    def arm(self):
        """Arm the device for one shot operation - disarms when done."""
        return self._exchange_str(rp_trig._make_msg(b'A'))

    def rearm(self):
        """Arm the device for multi shot operation - re-arms when done."""
        return self._exchange_str(rp_trig._make_msg(b'R'))

    def reinit(self, default_delay=-1):
        """Arm the device for special reinit operation.

        Device can be programmed during delay period after receiving tigger.
        """
        return self._exchange_str(
                rp_trig._make_msg(b'X', '<q', default_delay))

    def disarm(self):
        """Disarm the device, clears error flags and aborts programs."""
        return self._exchange_str(rp_trig._make_msg(b'D'))

    def trig(self):
        """Simulate trigger, i.e. start program if device is armed."""
        return self._exchange_str(rp_trig._make_msg(b'T'))

    def clksrc(self, val=3):
        """Change clock source and sync behaviour.

        bit     set                     cleared
        1:      external,               internal.
        2:      sync with trigger,      sync with clock
        """
        return self._exchange_str(
                rp_trig._make_msg(b'E', '<B', val))

    def gate(self, val=0):
        """Set gate flag of channels.

        In gate mode each event in timing will toggle output instead of
        generating a pulse.
        """
        return self._exchange_str(
            rp_trig._make_msg(b'G', '<B', self._tobyte(val)))

    def invert(self, val=0):
        """Set invert flag of channels."""
        return self._exchange_str(
            rp_trig._make_msg(b'I', '<B', self._tobyte(val)))

    def debug(self, val=0):
        """Introduce a clock divider = 1 << val for internal clock."""
        return self._exchange_str(
            rp_trig._make_msg(b'd', '<B', self._tobyte(val)))

    @property
    def statusx(self):
        return self._exchange(rp_trig._make_msg(b'x'), '<7Q')

    @property
    def state(self):
        return self._exchange(rp_trig._make_msg(b's'), '<B')[0]

    @property
    def control(self):
        return self._exchange(rp_trig._make_msg(b'c'), '<8B')

    @property
    def params(self):
        return self._exchange(rp_trig._make_msg(b'p'), '<6ql')

    @property
    def error(self):
        return self._exchange_str(rp_trig._make_msg(b'e'))

    def try_extclk(self, val=2):
        return bool(self._exchange(
                rp_trig._make_msg(b't', '<B', val), '<B')[0])


# UNIT TEST
class Test(unittest.TestCase):
    debug = False
    status = None
    timing = 0

    def test_status(self):
        status = self.dev.status
        if status != self.status:
            self.status = status
            os.sys.stderr.write('%s\n' % str(self.dev.status))

    def trig(self):
        self.dev.trig()
        self.timing = time.time()

    def wait(self, delay):
        self.timing += delay/1e7 * (1 << self.clk_div)
        delta = self.timing - time.time()
        if self.debug:
            os.sys.stderr.write('%s\n' % str(self.dev.params))
            step = max(.01, (1 << self.clk_div)/2e7)
            while delta >= 2*step:
                time.sleep(step)
                self.test_status()
                delta = self.timing - time.time()
            if delta > 0:
                time.sleep(delta)
            self.test_status()
        elif delta > 0:
            time.sleep(delta)

    def sleep(self, delay):
        time.sleep(delay/1e7 * (1 << self.clk_div))

    def setUp(self):
        self.clk_div = 17 if self.debug else 0
        self.dev = rp_trig(self._host)
        self.dev.disarm()
        self.dev.gate()
        self.dev.invert()
        self.dev.clksrc(0)
        self.dev.debug(self.clk_div)
        self.assertTrue(self.dev.state & STATE_IDLE)

    def default(self):
        self.dev.make_clock()
        self.assertEqual(self.dev.params, (0, 5, 10, 1, 10, 1, 1))
        self.assertEqual(str(self.dev.status.flags), '00000000eoricCI')

    def arm(self):
        self.dev.gate([2, 4])
        self.dev.invert([3, 4])
        burst = 3
        width = max(2, 10000 >> self.clk_div)
        period = width*2
        cycle = burst*period
        self.dev.make_clock(width=width, cycle=cycle, burst=burst, repeat=5)
        self.assertEqual(self.dev.params,
                         (0, width, period, burst, cycle, 5, 1))
        delay = max(2, 1000000 >> self.clk_div)
        steps = 3*width
        cycle = steps*3*burst
        self.dev.make_sequence(
                delay, width, period, burst, cycle, 2, [0, steps, 2*steps])
        self.sleep(1)
        self.assertEqual(
            self.dev.params, (delay, width, period, burst, cycle, 2, 3))
        self.dev.arm()
        self.sleep(2)
        self.assertTrue(self.dev.state & STATE_ARMED)
        self.trig()
        self.wait(delay/2)
        self.assertFalse(self.dev.state & STATE_NOTWAIT)
        self.wait((delay+cycle-width)/2)
        self.assertEqual(self.dev.status.repeat, 1)
        self.assertTrue(self.dev.state & STATE_ACTIVE)  # LOW
        self.wait(cycle)
        self.assertEqual(self.dev.status.repeat, 2)
        self.assertTrue(self.dev.state & STATE_ACTIVE)  # LOW
        self.wait((cycle+width)/2)
        self.assertTrue(self.dev.state & STATE_IDLE)
        self.assertEqual(str(self.dev.status.flags), '00011000eoricCI')

    def rearm(self):
        delay = max(1, 1500000 >> self.clk_div)
        width = max(1, 1000000 >> self.clk_div)
        period = 2*width
        self.dev.rearm()
        self.sleep(2)
        self.assertTrue(self.dev.state & STATE_ARMED)
        self.dev.make_clock(delay=delay, width=width)
        self.assertEqual(
                self.dev.params, (delay, width, period, 1, period, 1, 1))
        self.trig()
        self.wait(delay/2)
        self.assertFalse(self.dev.state & STATE_NOTWAIT)
        self.wait((delay+width)/2)
        self.assertTrue(self.dev.state & STATE_ACTIVE)  # HIGH
        self.wait(width)
        self.assertTrue(self.dev.state & STATE_ACTIVE)  # LOW
        self.wait(width)
        self.assertTrue(self.dev.state & STATE_ARMED)
        self.assertEqual(
            self.dev.params, (delay, width, period, 1, period, 1, 1))
        self.assertEqual(str(self.dev.status.flags), '00000000eoricDA')

    def reinit(self):
        delay = max(2, 1500000 >> self.clk_div)
        width = max(2, 1000000 >> self.clk_div)
        period = 2*width
        self.dev.reinit()
        self.sleep(2)
        self.assertTrue(self.dev.state & STATE_ARMED)
        self.trig()
        p = self.dev.params
        self.assertEqual((p[0], p[3:6]), (600000000, (0, 0, 0)))
        self.wait(delay/2)
        self.assertFalse(self.dev.state & STATE_NOTWAIT)
        self.dev.make_clock(delay=delay, width=width)
        self.assertEqual(
                self.dev.params, (delay, width, period, 1, period, 1, 1))
        self.wait((delay+width)/2)
        self.assertTrue(self.dev.state & STATE_ACTIVE)  # HIGH
        self.wait(width)
        self.assertTrue(self.dev.state & STATE_ACTIVE)  # LOW
        self.wait(width)
        self.assertTrue(self.dev.state & STATE_ARMED)
        p = self.dev.params
        self.assertEqual((p[0], p[3:6]), (600000000, (0, 0, 0)))
        self.assertEqual(str(self.dev.status.flags), '00000000eoricDA')

    def runTest(self):
        for test in self.tests:
            self.__getattr__(test)()

    tests = ('default', 'arm', 'rearm', 'reinit')
    @classmethod
    def getTests(cls, tests=()): return tuple(map(cls, tests or Test.tests))


def test(host=None, debug=False, tests=()):
    if host is None:
        Test._host = os.getenv('RedPitaya', '127.0.0.1')
    else:
        Test._host = host
    Test.debug = bool(debug)
    suite = unittest.TestSuite(Test.getTests(tests))
    tr = unittest.TextTestRunner(stream=os.sys.stderr, verbosity=2)
    tr.run(suite)


# EXECUTION
if __name__ == "__main__":
    if len(os.sys.argv) == 1:
        test()
    elif len(os.sys.argv) == 2:
        test(os.sys.argv[1])
    else:
        test(os.sys.argv[1], int(os.sys.argv[2]), os.sys.argv[3:])
