#!/usr/bin/python2
from collections import namedtuple
import sys
import ctypes
import numpy
import socket
import struct
import time
import threading
import unittest
if sys.version_info >= (3,):
    long = int

# STATE CONSTANTS
TIME_WIDTH = 40
INIT_DISARM = 0
INIT_ON = 1
INIT_ARM = 3
INIT_REARM = 7
INIT_REINIT = 15

MAX_STATUS = 8
MAX_SAMPLES = 45000

TIME_MASK = (1 << TIME_WIDTH) - 1

STATE_CH0 = 1
STATE_CH1 = 2
STATE_CH2 = 4
STATE_IDLE = 8
STATE_ARMED = 16
STATE_ACTIVE = 32
STATE_NOTWAIT = STATE_IDLE | STATE_ARMED | STATE_ACTIVE
STATE_TRG = 64
STATE_CLK = 128


Status = namedtuple("Status", (
    "index",
    "time",
    "mask",
    "cycle",
    "sequence",
    "burst",
    "repeat",
    "flags",
))


class Flags(long):
    def __str__(self):
        out = ''.join(
            c.upper() if (self >> 7-i) & 1 else c
            for i, c in enumerate('eoric')
        )
        return self.signals + out + self.wait_for[0] + self.gstate[0]

    def __repr__(self): return self.__str__() + bin(
            ((self >> 8) | 256) & 0x1FF)[3:]

    @property
    def gstate(self):
        if self & 0x02:
            if self & 0x01:
                return 'RUN'
            return 'WAI'
        elif self & 0x01:
            return 'ARM'
        return 'IDL'

    @property
    def wait_for(self): return 'DELAY' if self & 0x04 else 'CYCLE'

    @property
    def clear(self): return bool(self & 0x08)

    @property
    def inc_addr(self): return bool(self & 0x10)

    @property
    def restart(self): return bool(self & 0x20)

    @property
    def check(self): return bool(self & 0x40)

    @property
    def error(self): return bool(self & 0x80)

    @property
    def signals(self): return bin(((self >> 56) & 0xFF) | (1 << 8))[3:]


class struct_rptrig:
    class _Device(ctypes.Structure):
        _fields_ = [
            ("status", ctypes.c_ubyte*8),
            ("statusx", ctypes.c_uint64*7),
            ("init", ctypes.c_ubyte),
            ("trig", ctypes.c_ubyte),
            ("clear", ctypes.c_ubyte),
            ("save", ctypes.c_ubyte),
            ("clksrc", ctypes.c_ubyte),
            ("invert", ctypes.c_ubyte),
            ("gate", ctypes.c_ubyte),
            ("debug", ctypes.c_ubyte),
            ("delay", ctypes.c_uint64),
            ("width", ctypes.c_uint64),
            ("period", ctypes.c_uint64),
            ("burst", ctypes.c_uint64),
            ("cycle", ctypes.c_uint64),
            ("repeat", ctypes.c_uint64),
            ("count", ctypes.c_uint64),
            ("times", ctypes.c_uint64*MAX_SAMPLES),
        ]

    class _Sections(ctypes.Structure):
        _fields_ = [
            ("status", ctypes.c_ubyte*(8*8)),
            ("control", ctypes.c_ubyte*(1*8)),
            ("header", ctypes.c_ubyte*(7*8)),
            ("times", ctypes.c_uint64*MAX_SAMPLES),
        ]

    def __init__(self, iface):
        self.ptr = ctypes.c_void_p(0)
        iface.cdll.RPTRIG_GetDevice(ctypes.byref(self.ptr))

    @property
    def device(self):
        return ctypes.cast(
            self.ptr, ctypes.POINTER(struct_rptrig._Device)).contents

    @property
    def sections(self):
        return ctypes.cast(
            self.ptr, ctypes.POINTER(struct_rptrig._Sections)).contents

    @property
    def status(self):
        return tuple(self.sections.status)

    @property
    def control(self):
        return tuple(self.sections.control)

    @property
    def header(self):
        d = self.device
        return d.delay, d.width, d.period, d.burst, d.cycle, d.repeat, d.count

    @property
    def times(self):
        d = self.device
        return d.times[0:d.count]

    def __str__(self):
        return "rptrig" + str(self.header)

    def __repr__(self):
        return self.__class__.__name__ + "()"


# SERVER INTERFACE

class rptrig(object):
    _lock = threading.Lock()
    _NULL = ctypes.c_void_p(None)
    @staticmethod
    def _tobyte(val):
        if not isinstance(val, int):
            value = 0
            for ch in val:
                value |= 1 << ch
            return value
        return val

    @staticmethod
    def _toctypes(delay, width, period, burst, cycle, repeat, *args):
        delay = None if delay is None else ctypes.c_uint64(int(delay))
        width = None if width is None else ctypes.c_uint64(int(width))
        period = None if period is None else ctypes.c_uint64(int(period))
        burst = None if burst is None else ctypes.c_uint64(int(burst))
        cycle = None if cycle is None else ctypes.c_uint64(int(cycle))
        repeat = None if repeat is None else ctypes.c_uint32(int(repeat))
        if len(args) > 0:
            count = None if args[0] is None else ctypes.c_uint32(int(args[0]))
            return delay, width, period, burst, cycle, repeat, count
        return delay, width, period, burst, cycle, repeat

    @staticmethod
    def _byref(*args):
        return tuple(
            (rptrig._NULL if a is None else ctypes.byref(a))
            for a in args
        )

    def __init__(self):
        self._stop = False
        try:
            self.cdll = ctypes.CDLL('librptrig.so')
            self.cdll.RPTRIG_GetError.restype = ctypes.c_void_p
            self._error = ctypes.cast(
                    self.cdll.RPTRIG_GetError(), ctypes.c_char_p)
            self.dev = struct_rptrig(self)
            self.try_extclk()
        except OSError as exc:
            print('rptrig: ' + str(exc))
            raise

    def try_extclk(self, val=2):
        self.debug(0)
        self.disarm()
        self.clksrc(0)
        try:
            for i in range(10):
                if self.state & STATE_IDLE:
                    break
                time.sleep(.1)
            else:
                print("Internal clock not idle?")
            self.clksrc(1)
            self._make_sequence(delay=1e9, data=numpy.zeros(1))
            self.arm()
            time.sleep(0.1)
            self.trig()
            time.sleep(0.1)
            if self.state == STATE_IDLE:  # clear extclk bit
                raise Exception("invalid state")
            self.clksrc(val | 1)
            return True
        except Exception as e:
            self.clksrc(val & -2)
            return False
        finally:
            self.disarm()

    @property
    def statusx(self): return self.dev.device.statusx[:]

    @property
    def status(self):
        """Return current status buffer."""
        status = self.statusx
        index = status[0]
        time = status[1] & TIME_MASK
        mask = status[1] >> TIME_WIDTH
        cycle, sequence, burst, repeat = status[2:6]
        flags = Flags(status[6])
        return Status(
            index, time, mask, cycle, sequence, burst, repeat, flags)

    def arm(self):
        self.cdll.RPTRIG_Arm()

    def rearm(self):
        self.cdll.RPTRIG_Rearm()

    def disarm(self):
        self.cdll.RPTRIG_Disarm()

    def make_clock(
            self, delay=None, width=None, period=None,
            burst=None, cycle=None, repeat=None):
        args = rptrig._toctypes(delay, width, period, burst, cycle, repeat)
        delay, width, period, burst, cycle, repeat = rptrig._byref(*args)
        self.cdll.RPTRIG_MakeClock(delay, width, period, burst, cycle, repeat)

    def make_sequence(
            self, delay=None, width=None, period=None,
            burst=None, cycle=None, repeat=None, times=(), mask=()):
        mask = numpy.array(
                [(m & 0xFF) << TIME_WIDTH for m in mask or [255]],
                dtype=numpy.uint64)
        lentimes, lenmask = len(times), len(mask)
        topad = lentimes - lenmask
        if topad > 0:
            mask = numpy.pad(mask, (0, topad), 'wrap')
        elif topad < 0:
            mask = mask[:lentimes]
        times = numpy.ascontiguousarray(
                times or [0], dtype=numpy.uint64) & TIME_MASK
        return self._make_sequence(
            delay, width, period, burst, cycle, repeat, times | mask)

    def _make_sequence(
            self, delay=None, width=None, period=None,
            burst=None, cycle=None, repeat=None, data=()):
        print(data)
        dataref = data.ctypes.data_as(ctypes.POINTER(ctypes.c_uint64))
        buf = rptrig._toctypes(
            delay, width, period, burst, cycle, repeat, len(data))
        delay, width, period, burst, cycle, repeat, count = rptrig._byref(*buf)
        self.cdll.RPTRIG_MakeSequence(
            delay, width, period, burst, cycle, repeat, count, dataref)

    def reinit(self, delay=None):
        delay = None if delay is None else ctypes.c_uint64(int(delay))
        ref = rptrig._NULL if delay is None else ctypes.byref(delay)
        self.cdll.RPTRIG_Reinit(ref)

    def trig(self):
        self.cdll.RPTRIG_Trig()

    def clksrc(self, value):
        value = rptrig._tobyte(value)
        self.cdll.RPTRIG_SetClockSource(ctypes.c_int8(value))

    def gate(self, value=0):
        value = rptrig._tobyte(value)
        self.cdll.RPTRIG_SetGate(ctypes.c_uint8(value))

    def debug(self, value=0):
        value = rptrig._tobyte(value)
        self.cdll.RPTRIG_SetDebug(ctypes.c_uint8(value))

    def invert(self, value=0):
        value = rptrig._tobyte(value)
        self.cdll.RPTRIG_SetInvert(ctypes.c_uint8(value))

    @property
    def error(self):
        return str(self._error.value)

    @property
    def state(self):
        return self.cdll.RPTRIG_GetState()

    @property
    def params(self):
        args = rptrig._toctypes(0, 0, 0, 0, 0, 0, 0)
        refs = rptrig._byref(*args)
        self.cdll.RPTRIG_GetParams(*refs)
        return tuple(int(a.value) for a in args)

    def stop(self):
        self._stop = True

    def run(self, port):
        try:  # create an AF_INET, STREAM socket (TCP)
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)
        except socket.error as msg:
            print('Failed to create socket (%d): %s' % (msg[0], msg[1]))
            return
        try:
            sock.bind(('', int(port)))
        except socket.error as msg:
            print('Bind failed (%d): %s' % (msg[0], msg[1]))
            return
        try:
            sock.listen(5)
        except socket.error as msg:
            print('Listen failed (%d): %s' % (msg[0], msg[1]))
            return
        try:
            while not self._stop:
                try:
                    conn, addr = sock.accept()
                    rptrig.Handler(conn, addr, self).start()
                except KeyboardInterrupt:
                    raise
                except Exception as e:
                    print(e)
        finally:
            sock.close()
            with rptrig._lock:
                handlers = list(rptrig.Handler._set)
            for handler in handlers:
                handler.stop()
            for handler in handlers:
                handler.join()

    class Handler(threading.Thread):
        _set = set()

        def __init__(self, conn, addr, iface):
            super(rptrig.Handler, self).__init__(name='%s:%d' % addr)
            conn.settimeout(10)
            self.conn = conn
            self.iface = iface
            self._stop = False
            with rptrig._lock:
                rptrig.Handler._set.add(self)

        def stop(self):
            self._stop = True

        def senderror(self):
            msg = str(self.iface.error)
            self.conn.send(struct.pack('<L', len(msg))+msg)

        def run(self):
            try:
                print('%s : Connection established' % self.name)
                while not self._stop:
                    try:
                        cmd = "Waiting for command"
                        head = self.conn.recv(7)
                        with rptrig._lock:
                            if not head.startswith('RPT'):
                                if len(head) > 0:
                                    raise Exception(
                                        'Invalid header "%s"' % (head, ))
                                    self.conn.send("ERR: Invalid command.")
                                raise Exception('Connection closed')
                            length = struct.unpack('<L', head[3:])[0]
                            remaining = length+1
                            cmd = []
                            while remaining > 0:
                                cmd.append(self.conn.recv(remaining+256))
                                remaining -= len(cmd[-1])
                            cmd = ''.join(cmd)
                            cmd, param = cmd[0], cmd[1:]
                            if cmd == 'C':
                                param = tuple(
                                    (None if p < 0 else p)
                                    for p in struct.unpack('<6q', param[:48])
                                )
                                self.iface.make_clock(*param)
                            elif cmd == 'S':
                                args = tuple(
                                    (None if p < 0 else p)
                                    for p in struct.unpack('<6q', param[:48])
                                )
                                data = numpy.fromstring(
                                        param[48:length], numpy.uint64)
                                self.iface._make_sequence(*args, data=data)
                            elif cmd == 'A':
                                self.iface.arm()
                            elif cmd == 'R':
                                self.iface.rearm()
                            elif cmd == 'X':
                                self.iface.reinit([
                                    (None if p < 0 else p)
                                    for p in struct.unpack('<q', param[:8])
                                ][0])
                            elif cmd == 'D':
                                self.iface.disarm()
                            elif cmd == 'T':
                                self.iface.trig()
                            elif cmd == 'E':
                                self.iface.clksrc(
                                        struct.unpack('<B', param[0])[0])
                            elif cmd == 'G':
                                self.iface.gate(
                                        struct.unpack('<B', param[0])[0])
                            elif cmd == 'I':
                                self.iface.invert(
                                        struct.unpack('<B', param[0])[0])
                            elif cmd == 'd':
                                self.iface.debug(
                                        struct.unpack('<B', param[0])[0])
                            elif cmd == 'c':
                                self.conn.send(struct.pack(
                                    '<8B', *self.iface.dev.control))
                                continue
                            elif cmd == 't':
                                self.conn.send(struct.pack(
                                    '<B', int(self.iface.try_extclk(
                                        struct.unpack('<B', param[0])[0]))))
                                continue
                            elif cmd == 's':
                                self.conn.send(struct.pack(
                                    '<B', self.iface.state))
                                continue
                            elif cmd == 'x':
                                self.conn.send(struct.pack(
                                    '<7Q', *self.iface.statusx))
                                continue
                            elif cmd == 'p':
                                self.conn.send(struct.pack(
                                    '<6ql', *self.iface.params))
                                continue
                            elif cmd == 'e':
                                pass  # only return error
                            else:
                                raise Exception(
                                        'Invalid command "%s"' % (cmd, ))
                            self.senderror()
                    except KeyboardInterrupt:
                        raise
                    except Exception as e:
                        print('%s : %s - %s' % (self.name, cmd, str(e)))
                        break
            finally:
                self.conn.close()
                del(self.conn)
                with rptrig._lock:
                    rptrig.Handler._set.remove(self)


# UNIT TEST
class Test(unittest.TestCase):
    debug = False
    status = None
    timing = 0

    def test_status(self):
        status = self.dev.status
        if status != self.status:
            self.status = status
            sys.stderr.write('%s\n' % str(self.dev.status))

    def trig(self):
        self.dev.trig()
        self.timing = time.time()

    def wait(self, delay):
        self.timing += delay/1e7 * (1 << self.clk_div)
        delta = self.timing - time.time()
        if self.debug:
            sys.stderr.write('%s\n' % str(self.dev.params))
            step = max(.01, (1 << self.clk_div)/2e7)
            while delta >= 2*step:
                time.sleep(step)
                self.test_status()
                delta = self.timing - time.time()
            if delta > 0:
                time.sleep(delta)
            self.test_status()
        elif delta > 0:
            time.sleep(delta)

    def sleep(self, delay):
        time.sleep(delay/1e7 * (1 << self.clk_div))

    def setUp(self):
        self.clk_div = 17 if self.debug else 0
        self.dev = rptrig()
        self.dev.disarm()
        self.dev.gate()
        self.dev.invert()
        self.dev.clksrc(0)
        self.dev.debug(self.clk_div)
        self.assertTrue(self.dev.state & STATE_IDLE)

    def default(self):
        self.dev.make_clock()
        self.assertEqual(self.dev.params, (0, 5, 10, 1, 10, 1, 1))
        self.assertEqual(str(self.dev.status.flags), '00000000eoricCI')

    def arm(self):
        self.dev.gate([2, 4])
        self.dev.invert([3, 4])
        burst = 3
        width = max(2, 10000 >> self.clk_div)
        period = width*2
        cycle = burst*period
        self.dev.make_clock(width=width, cycle=cycle, burst=burst, repeat=5)
        self.assertEqual(self.dev.params,
                         (0, width, period, burst, cycle, 5, 1))
        delay = max(2, 1000000 >> self.clk_div)
        steps = 3*width
        cycle = steps*3*burst
        self.dev.make_sequence(
                delay, width, period, burst, cycle, 2, [0, steps, 2*steps])
        self.sleep(1)
        self.assertEqual(
            self.dev.params, (delay, width, period, burst, cycle, 2, 3))
        self.dev.arm()
        self.sleep(2)
        self.assertTrue(self.dev.state & STATE_ARMED)
        self.trig()
        self.wait(delay/2)
        self.assertFalse(self.dev.state & STATE_NOTWAIT)
        self.wait((delay+cycle-width)/2)
        self.assertEqual(self.dev.status.repeat, 1)
        self.assertTrue(self.dev.state & STATE_ACTIVE)  # LOW
        self.wait(cycle)
        self.assertEqual(self.dev.status.repeat, 2)
        self.assertTrue(self.dev.state & STATE_ACTIVE)  # LOW
        self.wait((cycle+width)/2)
        self.assertTrue(self.dev.state & STATE_IDLE)
        self.assertEqual(str(self.dev.status.flags), '00011000eoricCI')

    def rearm(self):
        delay = max(1, 1500000 >> self.clk_div)
        width = max(1, 1000000 >> self.clk_div)
        period = 2*width
        self.dev.rearm()
        self.sleep(2)
        self.assertTrue(self.dev.state & STATE_ARMED)
        self.dev.make_clock(delay=delay, width=width)
        self.assertEqual(
                self.dev.params, (delay, width, period, 1, period, 1, 1))
        self.trig()
        self.wait(delay/2)
        self.assertFalse(self.dev.state & STATE_NOTWAIT)
        self.wait((delay+width)/2)
        self.assertTrue(self.dev.state & STATE_ACTIVE)  # HIGH
        self.wait(width)
        self.assertTrue(self.dev.state & STATE_ACTIVE)  # LOW
        self.wait(width)
        self.assertTrue(self.dev.state & STATE_ARMED)
        self.assertEqual(
            self.dev.params, (delay, width, period, 1, period, 1, 1))
        self.assertEqual(str(self.dev.status.flags), '00000000eoricDA')

    def reinit(self):
        delay = max(2, 1500000 >> self.clk_div)
        width = max(2, 1000000 >> self.clk_div)
        period = 2*width
        self.dev.reinit()
        self.sleep(2)
        self.assertTrue(self.dev.state & STATE_ARMED)
        self.trig()
        p = self.dev.params
        self.assertEqual((p[0], p[3:6]), (600000000, (0, 0, 0)))
        self.wait(delay/2)
        self.assertFalse(self.dev.state & STATE_NOTWAIT)
        self.dev.make_clock(delay=delay, width=width)
        self.assertEqual(
                self.dev.params, (delay, width, period, 1, period, 1, 1))
        self.wait((delay+width)/2)
        self.assertTrue(self.dev.state & STATE_ACTIVE)  # HIGH
        self.wait(width)
        self.assertTrue(self.dev.state & STATE_ACTIVE)  # LOW
        self.wait(width)
        self.assertTrue(self.dev.state & STATE_ARMED)
        p = self.dev.params
        self.assertEqual((p[0], p[3:6]), (600000000, (0, 0, 0)))
        self.assertEqual(str(self.dev.status.flags), '00000000eoricDA')

    def runTest(self):
        for test in self.tests:
            self.__getattr__(test)()

    tests = ('default', 'arm', 'rearm', 'reinit')
    @classmethod
    def getTests(cls, tests=()): return tuple(map(cls, tests or Test.tests))


def test(debug=False, tests=()):
    Test.debug = bool(debug)
    suite = unittest.TestSuite(Test.getTests(tests))
    tr = unittest.TextTestRunner(stream=sys.stderr, verbosity=2)
    tr.run(suite)


# EXECUTION
if __name__ == "__main__":
    # rptrig 5000    - run server on port 5000
    # rptrig t       - run tests
    # rptrig d       - run tests with debug on
    # rptrig d arm   - run arm test with debug on
    if len(sys.argv) > 1:
        try:
            port = int(sys.argv[1])
            rptrig().run(port)
        except ValueError:
            test(sys.argv[1].startswith('d'), sys.argv[2:])
    else:
        rptrig().run(5000)
