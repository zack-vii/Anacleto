

# Vivado from Xilinx provides IP handling, FPGA compilation
# hsi (hardware software interface) provides software integration
# both tools are run in batch mode with an option to avoid log/journal files
VIVADO = vivado -nolog -nojournal -mode batch
VIVADO_SHELL = vivado -nolog -nojournal -mode tcl
HSI    = hsi    -nolog -nojournal -mode batch
HSI_SHELL    = hsi    -nolog -nojournal -mode tcl

FPGA_BIT  ?= out/$(SOC_BOARD).bit
FSBL_ELF  ?= sdk/fsbl/executable.elf
DTS       ?= sdk/dts/devicetree.dts
DTB       ?= sdk/dts/devicetree.dtb


# Petalinux ...
# . /opt/Xilinx/petalinux-v2015.4-final/settings.sh;

define _envset
. $(VIVADO_SETUP_SCRIPT); \
. $(VIVADO_SDK_SETUP_SCRIPT); \
export PETALINUX=$${PETALINUX}; \
export srcdir=$(srcdir); \
export top_srcdir=$(top_srcdir); \
export tmp=$(TMP); \
export maxThreads=1; \
export FPGA_REPO_DIR=${FPGA_REPO_DIR}; \
export FPGA_DIR=${FPGA_DIR}; \
export FPGA_BIT=${FPGA_BIT}; \
export DTREE_DIR=${DTREE_DIR}; \
export SOC_BOARD=${SOC_BOARD}; \
export VIVADO_VERSION=${VIVADO_VERSION}; \
export VIVADO_SOC_PART=${VIVADO_SOC_PART}; \
export SOURCES="${SOURCES}"; \
export BD_SOURCES="${BD_SOURCES}"; \
export IP_SOURCES="${IP_SOURCES}"
endef




## ////////////////////////////////////////////////////////////////////////// ##
## ///  VIVADO PROJECT  ///////////////////////////////////////////////////// ##
## ////////////////////////////////////////////////////////////////////////// ##

.PHONY: vivado_shell
vivado_shell: ##@vivado open a vivado shell with configured env
	@ ${_envset}; \
	$(VIVADO_SHELL) -source $(FPGA_DIR)/vivado_make.tcl

.PHONY: hsi_shell
hsi_shell:  ##@vivado open hsi shell with configured env
	@ ${_envset}; \
	$(HSI_SHELL) -source $(FPGA_DIR)/vivado_make.tcl


## ////////////////////////////////////////////////////////////////////////// ##
## ///  VIVADO PROJECT  ///////////////////////////////////////////////////// ##
## ////////////////////////////////////////////////////////////////////////// ##

new_project:   ##@vivado Create a new vivado project in vivado_project folder named as the currently selected board.
open_project:  ##@vivado Open the current project in vivado_project folder  or generate it using previously stored tcl script.
write_project: ##@vivado Store the current  project saving all related local sources in vivado_src folder.
write_bitstream:  ##@vivado generate bitstream using auto_synth and auto_impl runs.
edit_peripheral:  ##@vivado open all module pheripherals projects for edit.

write_project write_bitstream:
	@ ${_envset}; \
	  $(VIVADO) -source $(FPGA_DIR)/vivado_make.tcl -tclargs $@

new_project open_project edit_peripheral:
	@ ${_envset}; \
	  $(VIVADO_SHELL) -source $(FPGA_DIR)/vivado_make.tcl -tclargs $@

clean_project: ##@vivado Clean all build project files from disk (make write_project before this)
	-rm -rf vivado_project vivado.jou  vivado.log  \
		vivado_*.backup.jou  vivado_*.backup.log  vivado_pid*.str \
		webtalk.jou  webtalk.log  \
		webtalk_*.backup.jou  webtalk_*.backup.log



## ////////////////////////////////////////////////////////////////////////// ##
## ///  BITSTREAM  ////////////////////////////////////////////////////////// ##
## ////////////////////////////////////////////////////////////////////////// ##

.PHONY: fpga bit
fpga bit: $(FPGA_BIT)

$(FPGA_BIT):
	@ $(MAKE) write_bitstream


## ////////////////////////////////////////////////////////////////////////// ##
## ///  FSBL  /////////////////////////////////////////////////////////////// ##
## ////////////////////////////////////////////////////////////////////////// ##

.PHONY: fsbl
fsbl: $(FSBL_ELF)

$(FSBL_ELF):  $(FPGA_BIT)
	@ ${_envset}; \
	  $(HSI) -source $(FPGA_DIR)/vivado_make.tcl -tclargs write_fsbl



## ////////////////////////////////////////////////////////////////////////// ##
## ///  DEVICE TREEE  /////////////////////////////////////////////////////// ##
## ////////////////////////////////////////////////////////////////////////// ##

.PHONY: dts dtb
dts: $(DTS)
dtb: $(DTB)

sdk/dts/system.dts:  $(FPGA_BIT)
	@ $(MAKE) -C $(top_builddir)/fpga xlnx-devicetree; \
	  ${_envset}; \
	  $(HSI) -source $(FPGA_DIR)/vivado_make.tcl -tclargs write_devicetree

$(DTS): sdk/dts/system.dts $(LINUX_IMAGE)
	$(LINUX_BUILDDIR)/scripts/dtc/dtc -I dts -O dts -o $@ -i sdk/dts/ $<;cat $(top_builddir)/fpga/heartbeat.dtsi >> $(DTS)
$(DTB):  $(DTS) $(LINUX_IMAGE)
	$(LINUX_BUILDDIR)/scripts/dtc/dtc -I dts -O dtb -o $@ -i sdk/dts/ $<




## ////////////////////////////////////////////////////////////////////////// ##
## ///  DEPLOY  ///////////////////////////////////////////////////////////// ##
## ////////////////////////////////////////////////////////////////////////// ##

.PHONY: deploy
deploy: ##@miscellaneous Copy all files to target device
deploy: $(FPGA_BIT) $(LINUX_IMAGE) $(DTB)
if WITH_DEVICE_SSHKEY
	@ echo " --- deploying to target device: ${DEVICE_NAME} using key ---";
	scp -i $(DEVICE_SSHKEY) $^ \
	  $(DEVICE_USER)@$(DEVICE_IP):$(DEVICE_BOOT_DIR);
else
if WITH_DEVICE_SSHPASSWD
	@ echo " --- deploying to target device: ${DEVICE_NAME} using passwd ---";
	sshpass -p ${DEVICE_PASSWD} scp $^ \
	  $(DEVICE_USER)@$(DEVICE_IP):$(DEVICE_BOOT_DIR);
else
	@ echo "none of sshpass command or configured ssh key was found"
endif
endif

.PHONY: deploy_fpga
deploy_fpga: ##@miscellaneous Start generated bitstream in target device
deploy_fpga: $(FPGA_BIT)
	@ echo ""; \
	  echo " WARNING: This will reprogram fpga without setting devicetree and kernel "
if WITH_DEVICE_SSHKEY
	@ echo " --- deploying to target device: ${DEVICE_NAME} using key ---";
	scp -i $(DEVICE_SSHKEY) $^ \
	  $(DEVICE_USER)@$(DEVICE_IP):/tmp/fpga.bit; \
	ssh -i $(DEVICE_SSHKEY) $(DEVICE_USER)@$(DEVICE_IP) "cat /tmp/fpga.bit > /dev/xdevcfg";
else
if WITH_DEVICE_SSHPASSWD
	@ echo " --- deploying to target device: ${DEVICE_NAME} using passwd ---";
	sshpass -p ${DEVICE_PASSWD} scp $^ \
	  $(DEVICE_USER)@$(DEVICE_IP):/tmp; \
	sshpass -p ${DEVICE_PASSWD} \
	  ssh $(DEVICE_USER)@$(DEVICE_IP) "cat /tmp/fpga.bit > /dev/xdevcfg";
else
	@ echo "none of sshpass command or configured ssh key was found"
endif
endif

